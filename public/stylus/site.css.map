{"version":3,"sources":["node_modules/axis/axis/reset.styl","node_modules/axis/node_modules/nib/lib/nib/flex.styl","node_modules/axis/node_modules/nib/lib/nib/vendor.styl","node_modules/axis/node_modules/nib/lib/nib/border.styl","node_modules/axis/node_modules/nib/lib/nib/overflow.styl","node_modules/axis/axis/typography.styl","assets/stylus/_base/globals.styl","node_modules/rupture/rupture/index.styl","node_modules/axis/axis/vendor.styl","node_modules/axis/node_modules/nib/lib/nib/clearfix.styl","assets/stylus/_base/colors.styl","assets/stylus/_base/typography.styl","assets/stylus/_base/animations.styl","assets/stylus/_components/buttons.styl","node_modules/axis/axis/buttons.styl","node_modules/axis/axis/interaction.styl","assets/stylus/_pages/error.styl","assets/stylus/site.styl"],"names":[],"mappings":"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","sourcesContent":["// -----\n// Reset\n// -----\n\n// global-reset delegated to nib\n\nsupport-for-ie ?= true\n\n// Mixin: Normalize CSS\n// Based on v3.0.1 https://github.com/necolas/normalize.css\n\nnormalize-css()\n  html\n    font-family: sans-serif\n    -ms-text-size-adjust: 100%\n    -webkit-text-size-adjust: 100%\n\n  body\n    margin: 0\n\n  article, aside, details, figcaption, figure, footer, header, hgroup, main, nav, section, summary\n    display: block\n\n  audio, canvas, progress, video\n    display: inline-block\n    vertical-align: baseline\n\n  audio:not([controls])\n    display: none\n    height: 0\n\n  [hidden], template\n    display: none\n\n  a\n    background: transparent\n\n    &:active, &:hover\n      outline: 0\n\n  abbr[title]\n    border-bottom: 1px dotted\n\n  b, strong\n    font-weight: bold\n\n  dfn\n    font-style: italic\n\n  h1\n    font-size: 2em\n    margin: 0.67em 0\n\n  mark\n    background: #ff0\n    color: #000\n\n  small\n    font-size: 80%\n\n  sub, sup\n    font-size: 75%\n    line-height: 0\n    position: relative\n    vertical-align: baseline\n\n  sup\n    top: -0.5em\n\n  sub\n    bottom: -0.25em\n\n  img\n    border: 0\n\n  svg:not(:root)\n    overflow: hidden\n\n  figure\n    margin: 1em 40px\n\n  hr\n    -moz-box-sizing: content-box\n    box-sizing: content-box\n    height: 0\n\n  pre\n    overflow: auto\n\n  code, kbd, pre, samp\n    font-family: monospace, monospace\n    font-size: 1em\n\n  button, input, optgroup, select, textarea\n    color: inherit\n    font: inherit\n    margin: 0\n\n  button\n    overflow: visible\n\n  button, select\n    text-transform: none\n\n  button, html input[type=\"button\"], input[type=\"reset\"], input[type=\"submit\"]\n    -webkit-appearance: button\n    cursor: pointer\n\n  button[disabled], html input[disabled]\n    cursor: default\n\n  button::-moz-focus-inner, input::-moz-focus-inner\n    border: 0\n    padding: 0\n\n  input\n    line-height: normal\n\n  input[type=\"checkbox\"], input[type=\"radio\"]\n    box-sizing: border-box\n    padding: 0\n\n  input[type=\"number\"]::-webkit-inner-spin-button, input[type=\"number\"]::-webkit-outer-spin-button\n    height: auto\n\n  input[type=\"search\"]\n    -webkit-appearance: textfield\n    -moz-box-sizing: content-box\n    -webkit-box-sizing: content-box\n    box-sizing: content-box\n\n  input[type=\"search\"]::-webkit-search-cancel-button, input[type=\"search\"]::-webkit-search-decoration\n    -webkit-appearance: none\n\n  fieldset\n    border: 1px solid #c0c0c0\n    margin: 0 2px\n    padding: 0.35em 0.625em 0.75em\n\n  legend\n    border: 0\n    padding: 0\n\n  textarea\n    overflow: auto\n\n  optgroup\n    font-weight: bold\n\n  table\n    border-collapse: collapse\n    border-spacing: 0\n\n  td, th\n    padding: 0\n","/*\n * Vendor \"display: flex\" support with fallback to obsolete versions.\n */\n\nflex-version ?= box flex\n\n//\n// 1. Display values\n//    - http://www.w3.org/TR/css3-flexbox/#flex-containers\n//\ndisplay(type, args...)\n  if flex == type || inline-flex == type\n    if box in flex-version\n      if flex == type\n        display: -ms-flexbox args\n        display: vendor-value(box args, only: moz webkit)\n      else\n        display: -ms-inline-flexbox args\n        display: vendor-value(inline-box args, only: moz webkit)\n    if flex in flex-version\n      display: vendor-value(arguments, only: webkit official) // overwrites old webkit\n  else\n    display: arguments\n\n/*\n * New syntax for browsers like Google Chrome.\n * Plus a translation to the old syntax, if possible.\n */\n\n\n//\n// 5. Ordering and Orientation\n//    - http://www.w3.org/TR/css3-flexbox/#ordering-and-orientation\n//\n-flex-obsolete-direction(direction)\n  if box in flex-version\n    if row-reverse == direction || column-reverse == direction\n      vendor('box-direction', reverse, ignore: ms official)\n\n    if row == direction || row-reverse == direction\n      vendor('box-orient', horizontal, ignore: ms official)\n    else if column == direction || column-reverse == direction\n      vendor('box-orient', vertical, ignore: ms official)\n\n-flex-obsolete-wrap(value)\n  if box in flex-version\n    // WARN: wrap-reverse does not have a box equivalent. This will render in different manners\n    //    on box vs. flex values.\n    if 'wrap' == value || wrap-reverse == value\n      vendor('box-lines', multiple, ignore: ms official)\n    else if nowrap == value\n      vendor('box-lines', single, ignore: ms official)\n\nflex-direction(direction)\n  // obsolete\n  -flex-obsolete-direction(direction)\n\n  // new\n  if flex in flex-version\n    vendor('flex-direction', arguments, only: webkit ms official)\n\nflex-wrap(value)\n  // obsolete\n  -flex-obsolete-wrap(value)\n\n  if flex in flex-version\n    vendor('flex-wrap', arguments, only: webkit ms official)\n\nflex-flow()\n  // obsolete\n  -flex-obsolete-direction(arguments[0])\n  -flex-obsolete-direction(arguments[1])\n  -flex-obsolete-wrap(arguments[0])\n  -flex-obsolete-wrap(arguments[1])\n\n  // new\n  if flex in flex-version\n    vendor('flex-flow', arguments, only: webkit ms official)\n\n\norder()\n  // obsolete\n  if box in flex-version\n    vendor('box-ordinal-group', arguments, ignore: ms official)\n\n  // new\n  if flex in flex-version\n    vendor('flex-order', arguments, only: ms)\n    vendor('order', arguments, only: webkit official)\n\n\n//\n// 7. Flexibility\n//    - http://www.w3.org/TR/css3-flexbox/#flexibility\n//\nflex-grow(growth)\n  // obsolete\n  if box in flex-version\n    vendor('box-flex', growth)\n\n  // new\n  if flex in flex-version\n    vendor('flex-grow', arguments, only: webkit official)\n\nflex-basis()\n  if flex in flex-version\n    vendor('flex-basis', arguments, only: webkit official)\n\nflex-shrink()\n  if flex in flex-version\n    vendor('flex-shrink', arguments, only: webkit official)\n\nflex(growth)\n\n  // obsolete\n  if box in flex-version\n    shrink = 1\n\n    if none == growth || initial == growth\n      // Well known values\n      shrink = 0 if none == growth\n      growth = 0\n    else if is-width(growth) == true\n      // Basis is defined as the first parameter\n      growth = arguments[1] || 0\n      shrink = arguments[2] if 3 <= length(arguments)\n    else if arguments[1] && is-width(arguments[1]) == false\n      // Growth is first and shrink is second\n      shrink = arguments[1]\n\n    // Since we can't make the distinction between growing and shrinking in the box model, take\n    // the one that provides the most flexibility.\n    vendor('box-flex', max(growth, shrink), ignore: ms)\n\n  // new\n  if flex in flex-version\n    vendor('flex', arguments, only: webkit ms official)\n\n\n// converts the justification alignment\n-convert-justify(align)\n  if flex-start == align\n    return start\n  else if flex-end == align\n    return end\n  else if space-around == align\n    return distribute\n  else if space-between == align\n    return justify\n  else\n    return align\n\n//\n// 8. Alignment\n//    - http://www.w3.org/TR/css3-flexbox/#alignment\n//\njustify-content(align)\n  // obsolete\n  if box in flex-version\n    vendor('box-pack', -convert-justify(align), ignore: ms official)\n\n  // new\n  if flex in flex-version\n    vendor('flex-pack', -convert-justify(align), only: ms)\n    vendor('justify-content', align, only: webkit official)\n\nalign-content(align)\n  // WARN: Obsolete spec does not allow for adjustment here\n  if flex in flex-version\n    vendor('flex-line-pack', -convert-justify(align), only: ms)\n    vendor('align-content', align, only: webkit official)\n\n// converts alignment from 'flex' to normal value\n-convert-alignment(align)\n  if flex-start == align\n    return start\n  else if flex-end == align\n    return end\n  else\n    return align\n\nalign-items(align)\n  // obsolete\n  if box in flex-version\n    vendor('box-align', -convert-alignment(align), ignore: ms official)\n\n  // new\n  if flex in flex-version\n    vendor('flex-align', -convert-alignment(align), only: ms)\n    vendor('align-items', arguments, only: webkit official)\n\nalign-self(align)\n  // WARN: Obsolete spec does not allow for overriding alignment on individual items.\n  if flex in flex-version\n    vendor('align-self', align, only: webkit official)\n    vendor('flex-item-align', -convert-alignment(align), only: ms)\n","use('../nodes/vendor-helpers.js')\n@import 'config'\n\n/*\n * Alias \"nowrap\" as \"no-wrap\".\n */\n\nno-wrap = unquote('nowrap')\n\n/*\n * Helper to find out if a given value is a width\n */\n\nis-width(val)\n  if auto == val\n    return true\n  else if val && 'unit' == type(val)\n    // Stylus does not short circuit so we need to perform this as a distinct\n    // operation to prevent errors\n    return '' != unit(val)\n  return false\n\n/*\n * Vendor support for the given prop / arguments, optionally specifying the\n * only prefixes to utilize, or those which should be ignored.\n */\n\nvendor(prop, args, only = null, ignore = null, vendor-property = true)\n  need_normalize = !vendor-property or prop in ('transition' 'transition-property' 'border-image' 'border-image-slice')\n  for prefix in vendor-prefixes\n    unless (only and !(prefix in only)) or (ignore and prefix in ignore)\n      if official == prefix\n        if need_normalize\n          {prop}: normalize(prop,('%s' % args))\n        else\n          {prop}: args\n      else\n        newprop = prop\n        newprop = '-' + prefix + '-' + prop if vendor-property\n\n        if need_normalize\n          {newprop}: normalize(prop,('%s' % args),prefix)\n        else\n          {newprop}: args\n/*\n * Vendorize the given value.\n */\n\nvendor-value(arg, only = null, ignore = null)\n  prop = current-property[0]\n  for prefix in vendor-prefixes\n    unless (only and !(prefix in only)) or (ignore and prefix in ignore) or official == prefix\n      add-property(prop, '-%s-%s' % (prefix arg))\n  arg\n\n/*\n * Vendor \"box-shadow\" support.\n */\n\nbox-shadow()\n  vendor('box-shadow', arguments, only: webkit official)\n\n/*\n * Vendor \"user-select\" support.\n */\n\nuser-select()\n  vendor('user-select', arguments, only: webkit moz ms official)\n\n/*\n * Vendor \"column-count\" support.\n */\n\ncolumn-count()\n  vendor('column-count', arguments, only: webkit moz official)\n\n/*\n * Vendor \"column-gap\" support.\n */\n\ncolumn-gap()\n  vendor('column-gap', arguments, only: webkit moz official)\n\n/*\n * Vendor \"column-rule\" support.\n */\n\ncolumn-rule()\n  vendor('column-rule', arguments, only: webkit moz official)\n\n/*\n * Vendor \"column-rule-color\" support.\n */\n\ncolumn-rule-color()\n  vendor('column-rule-color', arguments, only: webkit moz official)\n\n/*\n * Vendor \"column-rule-width\" support.\n */\n\ncolumn-rule-width()\n  vendor('column-rule-width', arguments, only: webkit moz official)\n\n/*\n * Vendor \"column-rule-style\" support.\n */\n\ncolumn-rule-style()\n  vendor('column-rule-style', arguments, only: webkit moz official)\n\n/*\n * Vendor \"column-width\" support.\n */\n\ncolumn-width()\n  vendor('column-width', arguments, only: webkit moz official)\n\n/*\n * Vendor \"column-span\" support.\n */\n\ncolumn-span()\n  vendor('column-span', arguments, only: webkit official)\n\n/*\n * Vendor \"column-fill\" support.\n */\n\ncolumn-fill()\n  vendor('column-fill', arguments, only: moz)\n\n/*\n * Legacy syntax support for background-clip and background-origin\n */\n\nlegacy-bg-values(property, args)\n  legacy_args = ()\n  importance = unquote('')\n  for subargs in args\n    for arg in subargs\n      if arg in (border-box padding-box content-box)\n        arg = unquote('border')  if arg == border-box\n        arg = unquote('padding') if arg == padding-box\n        arg = unquote('content') if arg == content-box\n      if arg != '!important'\n        push(legacy_args,arg)\n      else\n        importance = !important\n  vendor(property, unquote(join(', ',legacy_args)) importance, only: moz webkit)\n\n/*\n * Vendor \"background-clip\" support.\n */\n\nbackground-clip()\n  if arguments[0] == text\n    vendor('background-clip', arguments, only: webkit)\n  else\n    legacy-bg-values('background-clip', arguments)\n    background-clip: arguments\n\n/*\n * Vendor \"background-origin\" support.\n */\n\nbackground-origin()\n  legacy-bg-values('background-origin', arguments)\n  background-origin: arguments\n\n/*\n * Vendor \"background-size\" support.\n */\n\nbackground-size()\n  vendor('background-size', arguments, only: webkit moz official)\n\n/*\n * Vendor \"transform\" support.\n */\n\ntransform()\n  vendor('transform', arguments)\n\n/*\n * Vendor \"transform-origin\" support.\n */\ntransform-origin()\n    vendor('transform-origin', arguments)\n\n/*\n * Vendor \"transform-style\" support.\n */\n\ntransform-style()\n  vendor('transform-style', arguments)\n\n/*\n * Vendor \"border-image\" support.\n */\n\nborder-image()\n  vendor('border-image', arguments, only: webkit moz o official)\n\n/*\n * Vendor \"transition\" support.\n */\n\ntransition()\n  vendor('transition', arguments)\n\n/*\n * Vendor \"transition-property\" support.\n */\n\ntransition-property()\n  vendor('transition-property', arguments)\n\n/*\n * Vendor \"transition-duration\" support.\n */\n\ntransition-duration()\n  vendor('transition-duration', arguments)\n\n/*\n * Vendor \"transition-timing-function\" support.\n */\n\ntransition-timing-function()\n  vendor('transition-timing-function', arguments)\n\n/*\n * Vendor \"transition-delay\" support.\n */\n\ntransition-delay()\n  vendor('transition-delay', arguments)\n\n/*\n * Vendor \"backface-visibility\" support.\n */\n\nbackface-visibility()\n  vendor('backface-visibility', arguments, only: webkit moz ms official)\n\n/*\n * Vendor \"perspective\" support.\n */\n\nperspective()\n  if mixin\n    vendor('perspective', arguments, only: webkit moz ms official)\n  else\n    'perspective(%s)' % arguments\n\n/*\n * Vendor \"perspective-origin\" support.\n */\n\nperspective-origin()\n  vendor('perspective-origin', arguments, only: webkit moz ms official)\n\n/*\n * Opacity with conditional IE support.\n */\n\nopacity(n, args...)\n  opacity: n args\n  if support-for-ie\n    if n == inherit or n == initial\n      -ms-filter: n args\n      filter: n args\n    else\n      val = round(n * 100)\n      if val == 100\n        -ms-filter: none args\n        filter: none args\n      else\n        -ms-filter: '\"progid:DXImageTransform.Microsoft.Alpha(Opacity=%s)\"' % val args\n        filter: 'alpha(opacity=%s)' % val args\n\n/*\n * Vendor \"text-size-adjust\"\n */\n\ntext-size-adjust()\n  vendor('text-size-adjust', arguments)\n\n/*\n * Alias the \"white-space\" property.\n */\n\nwhitespace()\n  white-space: arguments\n\n/*\n * Vendor \"box-sizing\" support.\n */\n\nbox-sizing()\n  vendor('box-sizing', arguments, only: webkit moz official)\n\n/*\n * Vendor \"box-orient\" support.\n */\n\nbox-orient()\n  vendor('box-orient', arguments, only: webkit moz official)\n\n/*\n * Vendor \"box-flex-group\" support.\n */\n\nbox-flex-group()\n  vendor('box-flex-group', arguments, only: webkit moz official)\n\n/*\n * Vendor \"box-ordinal-group\" support.\n */\n\nbox-ordinal-group()\n  vendor('box-ordinal-group', arguments, only: webkit moz ms official)\n\n\n/*\n * Vendor \"box-align\" support.\n */\n\nbox-align()\n  vendor('box-align', arguments, only: webkit moz ms official)\n\n/*\n * Vendor \"box-pack\" support.\n */\n\nbox-pack()\n  vendor('box-pack', arguments, only: webkit moz ms official)\n\n/*\n * Vendor \"box-direction\" support.\n */\n\nbox-direction()\n  vendor('box-direction', arguments, only: webkit moz ms official)\n\n/*\n * Vendor \"animation\" support.\n */\n\nanimation()\n  vendor('animation', arguments)\n\n\n/*\n * Vendor \"animation-name\" support.\n */\n\nanimation-name()\n  vendor('animation-name', arguments)\n\n/*\n * Vendor \"animation-duration\" support.\n */\n\nanimation-duration()\n  vendor('animation-duration', arguments)\n\n/*\n * Vendor \"animation-delay\" support.\n */\n\nanimation-delay()\n  vendor('animation-delay', arguments)\n\n/*\n * Vendor \"animation-direction\" support.\n */\n\nanimation-direction()\n  vendor('animation-direction', arguments)\n\n/*\n * Vendor \"animation-iteration-count\" support.\n */\n\nanimation-iteration-count()\n  vendor('animation-iteration-count', arguments)\n\n/*\n * Vendor \"animation-timing-function\" support.\n */\n\nanimation-timing-function()\n  vendor('animation-timing-function', arguments)\n\n/*\n * Vendor \"animation-play-state\" support.\n */\n\nanimation-play-state()\n  vendor('animation-play-state', arguments)\n\n/*\n * Vendor \"animation-fill-mode\" support.\n */\n\nanimation-fill-mode()\n  vendor('animation-fill-mode', arguments)\n\n/*\n * Vendor \"hyphens\" support.\n */\n\nhyphens()\n  vendor('hyphens', arguments, only: webkit moz ms official)\n\n/*\n * Vendor \"appearance\" support.\n */\n\nappearance()\n  vendor('appearance', arguments, only: webkit moz official)\n\n/*\n * Vendor \"tab-size\" support.\n */\n\ntab-size()\n  vendor('tab-size', arguments, only: moz o official)\n\n/*\n * Vendor \"overflow-scrolling\" support.\n */\n\noverflow-scrolling()\n  vendor('overflow-scrolling', arguments, only: webkit official)\n\n/*\n * Vendor \"text-overflow\" support, , -o- for opera 9.* - 10.*\n */\n\ntext-overflow()\n  vendor('text-overflow', arguments, only: official o)\n\n/*\n * Vendor \"text-size-adjust\" support.\n */\ntext-size-adjust()\n  vendor('text-size-adjust', arguments, only: official webkit ms)\n\n/*\n * Vendor \"font-smoothing\" support, webkit only.\n */\nfont-smoothing()\n  vendor('font-smoothing', arguments, only: webkit)\n\n/*\n * Helper for border-radius().\n */\n\n-apply-border-radius(pos, importance)\n  if length(pos) == 3\n    // border-radius: <top | buttom> <left | right> <n>\n    y = pos[0]\n    x = pos[1]\n    // We don't use moz for simple boder-radius anymore\n    // vendor('border-radius-%s%s' % pos, pos[2], only: moz)\n    vendor('border-%s-%s-radius' % pos, pos[2] importance, only: webkit official)\n  else if pos[0] in (top bottom)\n    // border-radius: <top | bottom> <n>\n    -apply-border-radius(pos[0] left pos[1], importance)\n    -apply-border-radius(pos[0] right pos[1], importance)\n  else if pos[0] in (left right)\n    // border-radius: <left | right> <n>\n    unshift(pos, top);\n    -apply-border-radius(pos, importance)\n    pos[0] = bottom\n    -apply-border-radius(pos, importance)\n\n/*\n * border-radius supporting vendor prefixes and\n * augmented behavior.\n *\n * Examples:\n *\n *    border-radius: 2px 5px\n *    border-radius: top 5px bottom 10px\n *    border-radius: left 5px\n *    border-radius: top left 5px\n *    border-radius: top left 10px bottom right 5px\n *    border-radius: top left 10px, bottom right 5px\n *\n */\n\nborder-radius()\n  pos = ()\n  augmented = false\n  importance = arguments[length(arguments) - 1] == !important ? !important : unquote('')\n\n  for args in arguments\n    for arg in args\n      if arg is a 'ident'\n        append(pos, arg)\n        augmented = true\n      else\n        append(pos, arg)\n        if augmented\n          -apply-border-radius(pos, importance)\n          pos = ()\n  vendor('border-radius', pos, only: webkit official) unless augmented\n\n/**\n * Vendor input-placeholder/placeholder support.\n *\n * Examples:\n *    // Default syntax\n *    body\n *      placeholder(color #333, font-weight normal)\n *\n *    // The comma is important\n *    .placeholder-red\n *      placeholder(color red,)\n *\n *    // We can pass a function\n *    green-placeholder()\n *      color green\n *    .placeholder-green\n *      placeholder(green-placeholder)\n *\n *    // We can pass a hash\n *    textarea\n *      placeholder((font-style italic) (font-weight bold) (padding '4px 10px'))\n */\nplaceholder()\n  for v in ':-webkit-input' '-moz' ':-moz' '-ms-input'\n    &:{v}-placeholder\n      for pair in arguments\n        if typeof(pair) == 'function'\n          pair()\n        else if pair is not null && pair[0] is not null\n          {pair[0]}: type(pair[1]) == 'string' ? s(pair[1]) : pair[1]\ninput-placeholder = placeholder\n\n/*\n * Vendor background support (gradients).\n */\n\nbackground()\n  if match('-gradient\\(', ''+arguments)\n    vendor('background', arguments, vendor-property: false)\n  else\n    background arguments\n\nbackground-image()\n  if match('-gradient\\(', ''+arguments)\n    vendor('background-image', arguments, vendor-property: false)\n  else\n    background-image arguments\n\ncursor()\n  if match('-gradient\\(', ''+arguments)\n    vendor('cursor', arguments, vendor-property: false)\n  else\n    cursor arguments\n\nlist-style()\n  if match('-gradient\\(', ''+arguments)\n    vendor('list-style', arguments, vendor-property: false)\n  else\n    list-style arguments\n\nlist-style-image()\n  if match('-gradient\\(', ''+arguments)\n    vendor('list-style-image', arguments, vendor-property: false)\n  else\n    list-style-image arguments\n","/*\n * border: <color>\n * border: ...\n */\n\nborder(color, args...)\n  if color is a 'color'\n    border: 1px solid color args\n  else\n    border: arguments\n","/*\n * Overflow utility. Maps to regular overflow, and adds an ellipsis value.\n *\n * Synopsis:\n *\n *   overflow: <type>\n *\n * Examples:\n *\n *     overflow: auto\n *     overflow: hidden\n *     overflow: ellipsis\n *\n */\n\noverflow()\n  if arguments[0] == ellipsis\n    ellipsis()\n  else\n    overflow: arguments\n","// ----------\n// Typography\n// ----------\n\n// Function: Line Height\n// \n// If there is a font-size set on the parent element, adjusts the line height to \n// match that. If not, it uses the base font-size to calculate the line-height.\n\n-line-height()\n  if @font-size\n    line-height: 1.6em\n  else\n    line-height: unit(font-size*1.6, 'px')\n    line-height: 1.6rem\n\n// Mixin: Text Margin\n// \n// Puts nice visually pleasing top and bottom margins on a paragraph of text.\n// Put a font-size on your element to have it adjust accordingly.\n// \n// ex. p\n//       font-size: 18px\n//       text-margin()\n\ntext-margin(size=font-size)\n  if @font-size\n    margin: .75em 0\n  else\n    margin: unit(font-size*.75, 'px') 0\n\n// Mixin: Paragraph\n// \n// Sets a nice size, line-height, and margins on a paragraph of text. Pass a\n// size in to customize. Toggle margins off if you don't want them.\n// \n// ex. p()\n// ex. p: 18px\n// ex. p: 14px false\n\np(size=1rem, margins = true)\n  font-size: size\n  text-margin() if margins\n  -line-height()\n  openTypeLigatures() if ligatures\n\n// Alias: paragraph\nparagraph = p\n\n// Alias: Font Size\n// An alias for 'font-size' with auto-fallback for rem.\n// ex. fs: 16px\n// ex. fs: 1.2rem\n\nfs(size)\n  if (unit(size) == 'rem')\n    font-size: round(unit((font-size*size), 'px'))\n    font-size: size\n  else\n    font-size: size\n\n// Alias: Uppercase\n// An alias for 'text-transform: uppercase'\n// ex. uppercase()\n\nuppercase()\n  text-transform: uppercase\n\n// Alias: Upcase\nupcase = uppercase\n\n// Alias: Lowercase\n// An alias for 'text-transform: lowercase'\n// ex. lowercase()\n\nlowercase()\n  text-transform: lowercase\n\n// Alias: Downcase\ndowncase = lowercase\n\n// Alias: Reset Case\n// Gets rid of an text transform\n// ex. reset-case()\n\nreset-case()\n  text-transform: none\n\n// Mixin: Small\n// \n// Makes your text smaller and a little lighter. Great on <small /> tags.\n// \n// ex. small()\n\nsmall()\n  font-size: 55%\n  opacity: .6\n  font-weight: normal\n\n// Function: Heading\n// For internal use within headings\n\n-heading(multiplier)\n  font-size: unit((font-size*multiplier), 'px')\n  font-size: unit(multiplier, 'rem')\n  text-rendering: optimizelegibility\n  font-weight: bold\n  text-margin()\n  -line-height()\n  openTypeLigatures() if ligatures\n\n// Mixin Set: h1, h2, h3, h4, h5, h6\n// \n// These provide nice defaults for headings based off the default font size.\n// The can scale infinitely, and work best when matched to their corresponding\n// html elements. If you'd like to change the base size of a header, just pass\n// it as an option.\n// \n// ex. h3()\n// ex. h3: 3.5\n\nh1(size=2.4)\n  -heading(size)\n\nh2(size=1.8)\n  -heading(size)\n\nh3(size=1.5)\n  -heading(size)\n\nh4(size=1.3)\n  -heading(size)\n\nh5(size=1.0)\n  -heading(size)\n\nh6(size=0.9)\n  -heading(size)\n  upcase()\n\n// Mixin: Link\n// \n// A nice default style for links. Accepts a color and a style. Color can be\n// anything, style can be underline, darken, lighten, or glow, each giving it a\n// different style of interaction when hovered. More suggestions here welcome.\n// \n// ex. link()\n// ex. link: green\n// ex. link: #57777E 'glow'\n\nlink(color=blue, style='underline')\n  color: color\n  text-decoration: none\n  transition()\n\n  if style == 'underline'\n    hover-underline()\n    &:hover\n      color: darken(@color, 15%)\n  else if style == 'darken'\n    &:hover\n      color: darken(@color, 20%)\n  else if style == 'lighten'\n    hover-lighten()\n  else if style == 'glow'\n    &:hover\n      text-shadow: 0 0 7px rgba(color, .6)\n      \n  &:visited\n    opacity: .8\n\n// Mixin: Reset Link\n// \n// Sometimes my link mixin of the browser defaults will give you questionable\n// link defaults that you don't want on certain elements. This guy gets rid of\n// that.\n\n// ex. reset-link()\n\nreset-link()\n  border: none\n  text-decoration: none\n  color: initial\n  \n  &:hover\n    border: none\n    text-decoration: none\n    color: initial\n    \n  &:visited\n    opacity: 1\n\n// Mixin: Text Selection\n// \n// This guy sets the text select color intelligently based on the\n// highlight-color variable found in the settings file. If you really want, you\n// can pass it a color override too.\n\n// ex. text-selection()\n\ntext-selection(color=highlight-color, textColor=null)\n  textColor = (light(color) ? white : #494949) unless textColor\n\n  &::-moz-selection\n    background: color\n    color: textColor\n    \n  &::selection\n    background: color\n    color: textColor\n\n// Mixin: Ul\n// \n// A nice default for list styles. More or less the same as browser defaults,\n// scales nicely. You can pass it any style that list-style-type would normally\n// take. Defaults to disc. Use this on a ul element por favor.\n// \n// ex. ul()\n// ex. ul: 'square'\n\nul(style='disc')\n  margin: 5px 15px\n  margin: 0.32rem 0.94rem\n  padding-left: 1rem\n\n  li\n    list-style-type: unquote(style)\n    padding: 2px 0\n    padding: 0.125rem\n\n// Mixin: Ol\n// \n// A nice default for list styles. More or less the same as browser defaults,\n// scales nicely. You can pass it any style that list-style-type would normally\n// take. Defaults to decimal. Use this on a ol element por favor.\n// \n// ex. ol()\n// ex. ol: 'upper-roman'\n\nol(style='decimal')\n  margin: 5px 18px\n  margin: 0.32rem 1.125rem\n  padding-left: 1rem\n\n  li\n    list-style-type: unquote(style)\n    padding: 2px 0\n    padding: 0.125rem\n\n// Mixin: Inline List\n// \n// For when you need your list to be horizontal. Pass it the spacing you want\n// between list elements, whatever units you'd like. Defaults to 20px.\n// \n// ex. inline-list()\n// ex. inline-list: 15px\n\ninline-list(spacing=20px)\n  group()\n  margin: 0\n  padding: 0\n\n  li\n    float: left\n    margin-right: spacing\n    list-style-type: none\n\n  li:last-child\n    margin-right: 0\n\n// Mixin: Reset List\n// \n// If you're tired of all the list shenanigans and want to get rid of them for\n// this special list you're working on, this is your guy. Resets the margins,\n// padding, and style.\n// \n// ex. reset-list()\n\nreset-list()\n  margin: 0\n  padding: 0\n\n  li\n    float: none\n    list-style-type: none\n    padding: 0\n    margin: 0\n\n// Mixin: Blockquote\n// \n// Nice styles for a blockquote, and even puts a nice hyphen in before your\n// citation. Use with a <p> and <cite>, <footer>, or <figcaption> inside for\n// best results. Pass a color or 'none' to set the left border.\n// \n// ex. blockquote()\n\nblockquote(color=blue)\n  border-left: 4px solid color\n  margin: 1em 0\n  padding-left: 1.5em\n  group()\n\n  > p\n    font-weight: 300\n    font-size: 127%\n    font-size: 1.27rem\n    line-height: 127%\n    line-height: 1.27rem\n    margin-top: 0\n\n  > cite, > footer, > figcaption\n    color: #888888\n    &:before\n      content: '\\2014'\n\n// Alias: blockquo\nblockquo = blockquote\n\n// Hyphenation\n// \n// Hyphenation is the better word-break. It’s locale aware, and inserts the\n// hyphen character at the correct place, when breaking the words. This is\n// especially important in responsive designs. It will save you from a lot of\n// ragged lines. And, no need anymore for clunky & slow Javascript hyphenation\n// fallbacks. Taken from http://www.newnet-soft.com/blog/csstypography\n// \n// ex. hyphenation()\n\nhyphenation()\n    -ms-word-break: break-all\n    word-break:     break-all\n    word-break:     break-word // webkit\n    hyphens: auto // none, auto, <number>\n    -webkit-hyphenate-before: 2\n    -webkit-hyphenate-after:  3\n    hyphenate-lines:          3\n\n// Additive Mixin: Base\n// \n// WARNING: Creates classes in your css and styles them - not to be used inside\n// an element.\n// \n// This is an essential mixin. You want this on your page. Sets your font stack,\n// size, and colors based on the settings file and makes sure that your text is\n// a great looking as possible. You can override any of the params, but there is\n// really no reason to.\n// \n// ex. base()\n\nbase(fonts=font-stack, size=font-size, color=font-color)\n  html\n    font-size: unit(size, 'px')\n    font-size: unit((size/16)*100, \"%\")\n\n  body\n    font-family: fonts\n    color: color\n    -webkit-font-smoothing: antialiased\n    -webkit-text-size-adjust: 100%\n    -ms-text-size-adjust: 100%\n    font-size-adjust: auto\n\n// Additive Mixin: Headers\n// \n// WARNING: Creates classes in your css and styles them - not to be used inside\n// an element.\n// \n// Adds roots' wonderful scaling header styles to your <hx> tags.\n// \n// ex. headers()\n\nheaders()\n  h1\n    h1()\n\n  h2\n    h2()\n\n  h3\n    h3()\n\n  h4\n    h4()\n\n  h5\n    h5()\n\n  h6\n    h6()\n\n// Additive Mixin: Lists\n// \n// WARNING: Creates classes in your css and styles them - not to be used inside\n// an element.\n// \n// Adds roots' styles to ul and ols.\n// \n// ex. lists()\n\nlists()\n  ul\n    ul()\n  ol\n    ol()\n\n// Additive Mixin: Bold-Italic\n// \n// WARNING: Creates classes in your css and styles them - not to be used inside\n// an element.\n// \n// Adds bold and italic styles to the right tags if you did a global reset.\n// \n// ex. bold-italic()\n\nbold-italic()\n  b\n    bold()\n  i\n    italic()\n  strong\n    bold()\n  em\n    italic()\n\n// Additive Mixin: Typography\n// \n// WARNING: Creates classes in your css and styles them - not to be used inside\n// an element.\n// \n// Adds roots' styles to bold and italic elements, headers, paragrapgs, small\n// text, links, lists, and blockquotes. Got all your basic elements covered.\n// \n// ex. typography()\n\ntypography()\n  bold-italic()\n  headers()\n  lists()\n  text-selection()\n\n  p\n    paragraph()\n\n  small\n    small()\n\n  a\n    link()\n\n  blockquote\n    blockquo()\n  \n  .hyphenation\n    hyphenation()\n","//\n// Global styles and fun stuff\n// –––––––––––––––––––––––––––––––––––––––––––\n\n\n// Variables\n$maxSiteWidth = 1140px\n$desktopWidth = 940px\n$tabletWidth  = 720px\n$mobileWidth  = 100%\n\n\n// Repsonive scale, reference: http://jenius.github.io/rupture/\nscale           = 0px 768px 992px 1200px\nmobile-cutoff   = 768px\ntablet-cutoff   = 992px\ndesktop-cutoff  = 1200px\n\n// custom image base path for roots mixins\nimg-path = ''\n\n// support for old IE\nsupport-for-ie = false\n\n// progressive IE (http://css3pie.com/)\npie-enabled = false\npie-path = '/pie.htc'\n\n\n//\n// Global layout\n// –––––––––––––––––––––\n\n*\n  box-sizing border-box\n\nbody, html\n  margin 0\n  padding 0 5%\n\n// Main responsive template styles here\nsection\n  padding rem(70px) 0\n\n.center\n  position relative\n  clear both\n  margin 0 auto\n  width 100%\n\n  +below(3)\n    width $desktopWidth\n\n  +below(2)\n    width $tabletWidth\n\n  +below(1)\n    width 90%\n    margin 0 5%\n\n//\n// Utility classes\n// –––––––––––––––––––––\n.circle\n  border-radius 50%\n\nnav[role='navigation']\n  ul\n    inline-list()\n","base-font-size ?= 16px\nrasterise-media-queries ?= false\n\nrupture = {\n  rasterise-media-queries: rasterise-media-queries\n  mobile-cutoff: 400px\n  desktop-cutoff: 1050px\n  hd-cutoff: 1800px\n  enable-em-breakpoints: false\n  base-font-size: base-font-size\n  anti-overlap: false\n  density-queries: 'dppx' 'webkit' 'moz' 'dpi'\n  retina-density: 1.5\n  use-device-width: false\n}\nrupture.scale = 0 (rupture.mobile-cutoff) 600px 800px (rupture.desktop-cutoff) (rupture.hd-cutoff)\nrupture.scale-names = 'xs' 's' 'm' 'l' 'xl' 'hd'\n\n-is-string(val)\n  if typeof(val) is not 'unit'\n    if val is a 'string' or val is a 'ident'\n      true\n    else\n      false\n  else\n    false\n\n-get-scale-number(scale-name)\n  for list-item, i in rupture.scale-names\n    if list-item is scale-name\n      return i + 1\n  return false\n\n-convert-to(to-unit, value, context = rupture.base-font-size)\n  from-unit = unit(value)\n  return value if to-unit is from-unit\n  if to-unit in ('em' 'rem')\n    return value if from-unit in ('em' 'rem')\n    return unit((value / context), to-unit)\n  if to-unit is 'px'\n    return unit((value * context), 'px')\n\n-on-scale(n)\n  return unit(n) is ''\n\n-larger-than-scale(n)\n  return (n > (length(rupture.scale) - 1)) and -on-scale(n)\n\n-is-zero(n)\n  return n is 0\n\n-overlap-shift(anti-overlap, n)\n  shift-unit = unit(n)\n  anti-overlap = 0px unless anti-overlap\n  anti-overlap = 1px if anti-overlap is true\n  if length(anti-overlap) is 1\n    return -convert-to(shift-unit, anti-overlap)\n  for val in anti-overlap\n    return val if unit(val) is shift-unit\n\n-adjust-overlap(anti-overlap, n, side = 'min')\n  -shift = -overlap-shift(anti-overlap, n)\n  if (side is 'min' and -shift > 0) or (side is 'max' and -shift < 0)\n    n = n + -shift\n  return n\n\n-is-positive(n)\n  return n >= 0\n\n-density-queries(density)\n  if typeof(density) is not 'unit'\n    if not -is-string(density)\n      density = '%s' % density\n  density = rupture.retina-density if density is 'retina'\n  queries = ()\n  for query in rupture.density-queries\n    if query is 'webkit'\n      push(queries, '(-webkit-min-device-pixel-ratio: %s)' % (density))\n    else if query is 'moz'\n      push(queries, '(min--moz-device-pixel-ratio: %s)' % (density))\n    else if query is 'o'\n      push(queries, '(-o-min-device-pixel-ratio: %s/1)' % (density))\n    else if query is 'ratio'\n      push(queries, '(min-device-pixel-ratio: %s)' % (density))\n    else if query is 'dpi'\n      if -is-string(density)\n        density=convert(density)\n      push(queries, '(min-resolution: %sdpi)' % (round(density * 96, 1)))\n    else if query is 'dppx'\n      push(queries, '(min-resolution: %sdppx)' % (density))\n  return queries\n\ncreate-fallback-class(selected, class)\n  /{'' + class + ' ' + selected}\n    {block}\n\n// +between(min, max)\n// usage (scale can be mixed with custom values):\n//   - +between(1, 3) scale:scale\n//   - +between(0, 3) 0 width:scale\n//   - +between(200px, 500px) custom:custom\n//   - +between(0, 300px) 0 width:custom\n//   - +between(1, 300px) scale:custom\n//   - +between(200px, 4) custom:scale\n\nbetween(min, max, anti-overlap = rupture.anti-overlap, density = null, orientation = null, use-device-width = rupture.use-device-width, fallback-class = null)\n  selected = selector()\n\n  if -is-string(orientation)\n    orientation = convert(orientation)\n  if -is-string(density)\n    density = convert(density)\n  if -is-string(min)\n    min = -get-scale-number(min)\n  if -is-string(max)\n    max = -get-scale-number(max)\n\n  -min = rupture.scale[min - 1] unless -is-zero(min) or (not -on-scale(min))\n  -max = rupture.scale[max] unless not -on-scale(max)\n  -min ?= min\n  -max ?= max\n\n  if (rupture.rasterise-media-queries)\n    if not (density or -max or orientation)\n      {block}\n  else\n    condition = 'only screen'\n    use-device-width = use-device-width ? 'device-' : ''\n    unless -min is 0\n      -min = -convert-to('em', -min) if rupture.enable-em-breakpoints\n      -min = -adjust-overlap(anti-overlap, -min, side: 'min')\n      condition = condition + ' and (min-' + use-device-width + 'width: %s)' % (-min)\n    unless -larger-than-scale(max)\n      -max = -convert-to('em', -max) if rupture.enable-em-breakpoints\n      -max = -adjust-overlap(anti-overlap, -max, side: 'max')\n      condition = condition + ' and (max-' + use-device-width + 'width: %s)' % (-max)\n    if orientation\n      condition = condition + ' and (orientation: %s)' % (orientation)\n    if density\n      conditions = ()\n      for query in -density-queries(density)\n        push(conditions, condition + ' and %s' % (query))\n      condition = join(', ', conditions)\n    @media condition\n      {block}\n  if fallback-class\n    +create-fallback-class(selected, fallback-class)\n      {block}\n\nat(scale-point, anti-overlap = rupture.anti-overlap, density = null, orientation = null, use-device-width = rupture.use-device-width, fallback-class = null)\n  if -is-string(orientation)\n    orientation = convert(orientation)\n  if -is-string(density)\n    density = convert(density)\n  +between(scale-point, scale-point, anti-overlap, density, orientation, use-device-width, fallback-class)\n    {block}\n\nfrom-width(scale-point, anti-overlap = rupture.anti-overlap, density = null, orientation = null, use-device-width = rupture.use-device-width, fallback-class = null)\n  if -is-string(orientation)\n    orientation = convert(orientation)\n  if -is-string(density)\n    density = convert(density)\n  +between(scale-point, length(rupture.scale), anti-overlap, density, orientation, use-device-width, fallback-class)\n    {block}\n\nabove = from-width\n\nto-width(scale-point, anti-overlap = rupture.anti-overlap, density = null, orientation = null, use-device-width = rupture.use-device-width, fallback-class = null)\n  if -is-string(orientation)\n    orientation = convert(orientation)\n  if -is-string(density)\n    density = convert(density)\n  +between(1, scale-point, anti-overlap, density, orientation, use-device-width, fallback-class)\n    {block}\n\nbelow = to-width\n\nmobile(anti-overlap = rupture.anti-overlap, density = null, orientation = null, use-device-width = rupture.use-device-width, fallback-class = null)\n  if -is-string(orientation)\n    orientation = convert(orientation)\n  if -is-string(density)\n    density = convert(density)\n  +below(rupture.mobile-cutoff, anti-overlap, density, orientation, use-device-width, fallback-class)\n    {block}\n\ntablet(anti-overlap = rupture.anti-overlap, density = null, orientation = null, use-device-width = rupture.use-device-width, fallback-class = null)\n  if -is-string(orientation)\n    orientation = convert(orientation)\n  if -is-string(density)\n    density = convert(density)\n  +between(rupture.mobile-cutoff, rupture.desktop-cutoff, anti-overlap, density, orientation, use-device-width, fallback-class)\n    {block}\n\ndesktop(anti-overlap = rupture.anti-overlap, density = null, orientation = null, use-device-width = rupture.use-device-width, fallback-class = null)\n  if -is-string(orientation)\n    orientation = convert(orientation)\n  if -is-string(density)\n    density = convert(density)\n  +above(rupture.desktop-cutoff, anti-overlap, density, orientation, use-device-width, fallback-class)\n    {block}\n\nhd(anti-overlap = rupture.anti-overlap, density = null, orientation = null, use-device-width = rupture.use-device-width, fallback-class = null)\n  if -is-string(orientation)\n    orientation = convert(orientation)\n  if -is-string(density)\n    density = convert(density)\n  +above(rupture.hd-cutoff, anti-overlap, density, orientation, use-device-width, fallback-class)\n    {block}\n\ndensity(density, orientation = null, fallback-class = null)\n  selected = selector()\n  if not (rupture.rasterise-media-queries)\n    conditions = ()\n    for query in -density-queries(density)\n      condition = 'only screen and %s' % (query)\n      if orientation\n        condition = condition + ' and (orientation: %s)' % (orientation)\n      push(conditions, condition)\n    condition = join(', ', conditions)\n    @media condition\n      {block}\n    if fallback-class\n      +create-fallback-class(selected, fallback-class)\n        {block}\n\npixel-ratio = density\n\nretina(orientation = null, fallback-class = null)\n  +density('retina', orientation, fallback-class)\n    {block}\n\nlandscape(density = null, fallback-class = null)\n  selected = selector()\n  if not (rupture.rasterise-media-queries)\n    if -is-string(density)\n      density = convert(density)\n    if density\n      +pixel-ratio(density, orientation: landscape, fallback-class)\n        {block}\n    else\n      @media only screen and (orientation: landscape)\n        {block}\n      if fallback-class\n        +create-fallback-class(selected, fallback-class)\n          {block}\n\nportrait(density = null, fallback-class = null)\n  selected = selector()\n  if not (rupture.rasterise-media-queries)\n    if -is-string(density)\n      density = convert(density)\n    if density\n      +pixel-ratio(density, orientation: portrait, fallback-class)\n        {block}\n    else\n      @media only screen and (orientation: portrait)\n        {block}\n      if fallback-class\n        +create-fallback-class(selected, fallback-class)\n          {block}\n","// ------\n// Vendor\n// ------\n\n// Utilities specifically intended for helping with vendor-prefixed\n// css properties\n\n// Alias: Transition\n// \n// Transition with an intelligent default.\n// \n// ex. transition()\n// ex. transition: color 1s ease\n// ex. transition(color 1s ease, background 2.4s linear)\n\ntransition()\n  arguments = unquote('all .3s ease') unless arguments\n  transition: arguments\n\n\n// Alias: Box Shadow\n// \n// Box shadow with pie support, if you are using it.\n// \n// ex. box-shadow: 1px 1px 3px blue\n// ex. box-shadow(1px 1px 3px blue, inset 2px 0 5px rgba(0,0,0,.5))\n\nbox-shadow()\n  box-shadow: arguments\n  pie()\n\n// Alias: Border Radius\n// \n// Border-radius with pie support, if you are using it.\n// \n// ex. +round-corners(5px)\n\nborder-radius()\n  border-radius: arguments\n  pie()\n\n// Alias: Opacity\n// \n// I know, it seems silly. But every time you go to old IE testing you will be\n// thanking yourself for using this instead of the normal opacity declaration.\n// Overrides default opacity.\n// \n// ex. opacity: .6\n\nopacity(opacity)\n  filter: s(\"progid:DXImageTransform.Microsoft.Alpha(Opacity=%s)\", opacity * 100) if support-for-ie\n  opacity: opacity\n\n// Alias: Border Box\n// A quicker way to specify border-box sizing.\n\nborder-box()\n  box-sizing: border-box\n\n// Alises: background-appearance-x and y\n// \n// In case you want to use an unsupported background-position property, this\n// should set you straight!\n\nbackground-position-x(x)\n  background-position: x 0\n\nbackground-position-y(y)\n  background-position: 0 y\n\n// Mixin: Opentype ligatures\n// \n// The vast majority of fonts contain lowercase and uppercase alphabets,\n// numerals, punctuation and accents. // Many professionally-designed fonts\n// also contain ligatures, alternative characters, smallcaps, different kinds of\n// numbers, and sometimes much more besides. This enables it.\n// \n// Source: http://www.newnet-soft.com/blog/csstypography\n// Additional: http://blog.fontdeck.com/post/15777165734/opentype-1\n\nopenTypeLigatures()\n  -moz-font-feature-settings:    \"liga=1, dlig=1\"\n  -ms-font-feature-settings:     \"liga\", \"dlig\"\n  -webkit-font-feature-settings: \"liga\", \"dlig\"\n  -o-font-feature-settings:      \"liga\", \"dlig\"\n  font-feature-settings:         \"liga\", \"dlig\"\n","/*\n * The Magnificent Micro Clearfix\n *\n * Useful for clearing floats without structural markup.\n * Prevents margin-collapsing on child elements in most cases.\n *\n * Known issues:\n *\n * 1. For IE 6/7 when applied to an element that contains only left-floated\n *    children the bottom margin on child elements will be collapsed.\n *\n * 2. For Firefox versions prior to 3.5 when applied to the first child element\n *    of body, and the element does not have non-zero padding, extra space will\n *    appear between the body and the first child.\n *\n * See http://nicolasgallagher.com/micro-clearfix-hack/\n * and http://j.mp/bestclearfix\n *\n */\n\nclearfix()\n  &:before\n  &:after\n    content: \"\"\n    display: table\n  &:after\n    clear: both\n  zoom: 1 if support-for-ie\n","// text highlight color\r\nhighlight-color = blue\r\n\r\n// 140 Color Names Supported by All Browsers\r\n// http://www.w3schools.com/htmL/html_colornames.asp\r\n\r\n// Name that Color\r\n// http://chir.ag/projects/name-that-color/#6195ED\r\n\r\n// Brand colors\r\n$white = #fff\r\n$black = #000\r\n\r\n// colors (via http://clrs.cc - slightly modded)\r\nnavy = #001F3F\r\nblue = #0074D9\r\naqua = #7FDBFF\r\nteal = #39CCCC\r\nolive = #3D9970\r\ngreen = #2ECC40\r\nlime = #01FF70\r\nyellow = #FFDC00\r\norange = #FF851B\r\nred = #D13F19\r\nmaroon = #85144B\r\nfuchsia = #F012BE\r\npurple = #B10DC9\r\nwhite = #FFFFFF\r\nsilver = #DDDDDD\r\ngray = #AAAAAA\r\nblack = #222222\r\n\r\n// Color classes\r\n.black\r\n  color $black\r\n\r\n.white\r\n  color $white\r\n","//\r\n// Typography\r\n// –––––––––––––––––––––––––––––––––––––––––––\r\n\r\n// in progress\r\n\r\n// font stack (add your own!)\r\n// helvetica-neue = \"Helvetica Neue\", HelveticaNeue, Helvetica, Arial, sans-serif\r\n// helvetica = \"Helvetica Neue\", Helvetica, Arial, sans-serif\r\n// georgia = Georgia, Cambria, \"Times New Roman\", Times, serif\r\n// lucidia-grande = \"Lucida Grande\", Tahoma, Verdana, Arial, sans-serif\r\n// monospace = unquote(\"'Bitstream Vera Sans Mono', Consolas, Courier, monospace\")\r\n// verdana = Verdana, Geneva, sans-serif\r\n\r\n$main-font = \"Helvetica Neue\", \"Helvetica\", \"Arial\", sans-serif\r\n\r\n.defaultType\r\n  font-family $main-font\r\n  font-weight normal\r\n  font-style normal\r\n  -webkit-font-smoothing antialiased\r\n\r\n\r\nbody, p, a, h1, h2, h3, h4, h5, h6,\r\nsmall, em, strong, input, button\r\n  @extends .defaultType\r\n\r\n// Letterspacing\r\n// –––––––––––––––––––––––––––––––––––––––––––\r\n$tight-spacing = -.045em\r\n$snug-spacing = -.02em\r\n$more-spacing = .1em\r\n\r\n\r\n// Headings\r\n// –––––––––––––––––––––––––––––––––––––––––––\r\nh1, h2, h3, h4, h5, h6\r\n  display block\r\n  margin 1rem 0\r\n  font-weight normal\r\n\r\n  // Remove the margin-top on all :first-child headers\r\n  // as the padding on the parent *almost* always makes up for it\r\n  &:first-child\r\n    margin-top 0\r\n\r\n  // Standardize margin-bottom on headers\r\n  margin-bottom 1rem\r\n\r\n  // links need to inherit the heading color\r\n  a\r\n    color inherit\r\n\r\n\r\n// Overwrite Axis h1() sizes. Call these anywhere, even on non-heading styles.\r\nh1()\r\n  font-size rem(64px)\r\nh2()\r\n  font-size rem(48px)\r\nh3()\r\n  font-size rem(36px)\r\nh4()\r\n  font-size rem(28px)\r\nh5()\r\n  font-size rem(22px)\r\nh6()\r\n  font-size rem(18px)\r\n\r\nh1\r\n  h1()\r\n  // more heading styles here\r\nh2\r\n  h2()\r\nh3\r\n  h3()\r\nh4\r\n  h4()\r\nh5\r\n  h5()\r\nh6\r\n  h6()\r\n//\r\n// Default Type styles\r\np\r\n  font-size(16px)\r\n  line-height 1.5em\r\n\r\n\r\n// ligatures\r\nligatures = false\r\n\r\n// vertical rhythm\r\nbase-line-height = 24px\r\ndefault-rhythm-border-style = solid\r\nrelative-font-sizing = true\r\nround-to-nearest-half-line = false\r\nmin-line-padding = 2px\r\n","//\n// Animations – defaults and variables\n// –––––––––––––––––––––––––––––––––––––––––––\n\n$duration = 0.3s\n$easing   = ease-in-out\n\n.animated\n  animation-duration .5s\n  animation-fill-mode both\n\n\n@keyframes overscale \n  0%\n    transform(scale(0))\n\n  70%\n    transform(scale(1.1))\n\n  100% \n    transform(scale(1))\n\n.over-scale\n  animation-name overscale\n  animation-duration .6s\n  animation-delay .3s\n  animation-timing-function $easing\n\n// Add individual animations as needed\n\n.delay-1\n  animation-delay .25s\n\n.delay-2\n  animation-delay .5s\n","//\n// Button base styles and mixins\n// ––––––––––––––––––––––––––––––––––––––––––––––––\n\n.btn\n  button()\n  background pink\n  hover-color orange\n","// -------\n// Buttons\n// -------\n\n// Function: highlight\n// \n// Adds a light brighter line across the top of the element for a perspective\n// effect. Takes an optional argument for strength, which takes a value between\n// 0 and 1.\n// \n// ex. highlight()\n// ex. highlight: .7\n\n-highlight(strength = .3)\n  box-shadow(s(\"inset 0 1px 0 %s\", rgba(255,255,255,strength)))\n\n// Function: parse\n// Used internally for setting button sizes.\n\n-parse(size)\n  if size == \"small\"\n    return 10\n  else if size == \"medium\"\n    return 13\n  else if size == \"large\"\n    return 18\n  else\n    return size\n\n// Mixin: Button\n// \n// Creates a very basic looking button style. Three optional params:\n// - color: Takes any color, defaults to the default global color\n// - size: Takes 'small', 'medium', 'large', or an integer. The numbers reflect\n//   the font size for the text inside the button, but scales all other aspects\n//   as well (corners, padding, etc).\n// - textColor: Takes any color for the button text, defaults to trying to\n//   detect whether the background is dark or light and setting the opposite.\n// \n// ex. button()\n// ex. button: blue\n// ex. button: #D4513B\n// ex. button: green large\n// ex. button: #4C82D4 24\n\nbutton(color = default-color, size = \"medium\", textColor = null)\n\n  // color detection and changes\n  textColor = (light(color) ? #494949 : #fff) unless textColor\n  parsed_size = -parse(size)\n\n  // now that we've got numbers, let's work some proportions\n  height = round((parsed_size * 1.53px) / 2)\n  width = round(((parsed_size * 1.53px) * 2.2) / 2)\n\n  // dynamically calculated styles\n  font-size: unit(parsed_size, 'px')\n  padding: unit(height, 'px') unit(width, 'px')\n  border-radius: round(parsed_size / 4.33333px)\n  background-color: color\n  color: textColor\n\n  // constant styles\n  cursor: pointer\n  font-weight: bold\n  font-family: font-stack\n  line-height: 1em\n  text-align: center\n  text-decoration: none\n  display: inline-block\n  border none\n  &:hover, &:focus\n    background-color: darken(color, 5%)\n    color: darken(textColor, 3%)\n\n  &:active\n    background-color: darken(color, 10%)\n\n// Mixin: Glossy Button\n// \n// Creates a more fancy looking button style. Five optional params:\n// - color: Takes any color, defaults to the default global color\n// - size: Takes 'small', 'medium', 'large', or an integer. The numbers reflects\n//   the font size for the text inside the button, but scales all other aspects\n//   as well.\n// - textColor: Takes any color for the button text, defaults to trying to\n//   detect whether the background is dark or light and setting the opposite.\n// - shadowColor: Color for the text shadow, default is the contrast detection\n//   described above.\n// - hoverColor: Color of the text shadow when hovered. Default is contrast\n//   detection as described above. You probably don't need to use this.\n// \n// ex. glossy-button()\n// ex. glossy-button: blue\n// ex. glossy-button: #D4513B\n// ex. glossy-button: green large\n// ex. glossy-button: #4C82D4 24\n\nglossy-button(color = default-color, size = \"medium\", textColor = null, shadowColor = null, hoverColor = null)\n\n  // color detection and changes\n  if textColor\n    darkText = light(textColor) ? true : false\n  else\n    darkText = light(color) ? false : true\n    textColor = darkText ? white : #494949\n\n  shadowColor = darkText ? rgba(#000,.1) : rgba(#fff,.3) unless shadowColor\n  hoverColor = darkText ? rgba(#000,.2) : rgba(#fff,.5) unless hoverColor\n  downShadow = darkText ? 0 -1px 1px rgba(#000,.2) : 1px 1px 1px rgba(#fff,.6)\n\n  // parse words, make sure it's a number\n  parsed_size = -parse(size)\n\n  // now that we've got numbers, let's work some proportions\n  height = round((parsed_size*1.53px)/2)\n  width = round(((parsed_size*1.53px)*2.2)/2)\n\n  // dynamically calculated styles\n  font-size: unit(parsed_size, 'px')\n  padding: unit(height, 'px') unit(width, 'px')\n  border-radius: round(parsed_size/4.33333px)\n  gradient: color\n  text-shadow: 1px 1px 1px shadowColor\n  border: s('1px solid %s', darken(color, 10%))\n  color: textColor\n\n  // constant styles\n  -highlight()\n  cursor: pointer\n  font-weight: bold\n  font-family: font-stack\n  line-height: 1em\n  text-align: center\n  text-decoration: none\n  display: inline-block\n\n  &:hover, &:focus\n    background-position: 0 unit(height * -1, 'px')\n    color: darken(textColor, 3%)\n    text-shadow: 1px 1px 1px hoverColor\n\n  &:active\n    box-shadow(s(\"inset 0 1px %s %s\", parsed_size/2.6px, rgba(darken(color, 25%),.6)))\n    text-shadow: downShadow\n    border-color: darken(color, 18%)\n\n// Mixin: Button Disabled\n// \n// Add this mixin to a button and it will make the button appear to be disabled.\n// Try attaching to a class like .disabled and adding that class to the button.\n// Takes no arguments.\n// \n// ex. .disabled\n//       button-disabled()\n\nbutton-disabled()\n  background: #ccc\n  border-color: darken(#ccc, 10%)\n  opacity: .5\n  cursor: default\n  no-select()\n\n  &:hover\n    background: #ccc\n    background-position: 0 0\n    \n  &:active\n    background: #ccc\n    box-shadow: none\n    border-color: darken(#ccc, 10%)\n    text-shadow: 1px 1px 1px rgba(#000,.1)\n\n// Additive Mixin: Buttons\n// \n// WARNING: Creates classes in your css and styles them - not to be used inside\n// an element.\n// \n// This mixin makes it such that you can use classes to define buttons on your\n// page.\n// - .btn: creates a simple button\n// - .btn-fancy: creates a fancy button\n// - .disabled: disables an existing button (will only work on .btn and\n//   .btn-simple)\n\nbuttons()\n  .btn\n    transition()\n    button()\n  .btn-fancy\n    transition()\n    glossy-button()\n  .btn.disabled, .btn-simple.disabled\n    button-disabled()\n","// -----------\n// Interaction\n// -----------\n\n// These mixins trigger on some sort of interaction with an element, like a\n// hover or a click.\n\n// Mixin: Hover Darken\n// \n// Darkens the color and/or background color on your element when it's hovered.\n// Takes an optional percentage to darken it.\n// \n// ex. hover-darken()\n// ex. hover-darken: 30%\n\nhover-darken(percent = 15%, forceUseColor = false)\n  &:hover\n    if @background and !forceUseColor\n      background-color: darken(@background, percent)\n    else if @background-color and !forceUseColor\n      background-color: darken(@background-color, percent)\n    else if @color\n      color: darken(@color, percent)\n    else\n      warn('you need to set a color or background color on your element for this to work')\n\n// Mixin: Hover Lighten\n// \n// Works the same way as hover-darken but lightens the color.\n// \n// ex. hover-lighten()\n// ex. hover-lighten: 30%\n\nhover-lighten(percent = 15%, forceUseColor = false)\n  &:hover\n    if @background and !forceUseColor\n      background-color: lighten(@background, percent)\n    else if @background-color and !forceUseColor\n      background-color: lighten(@background-color, percent)\n    else if @color\n      color: lighten(@color, percent)\n    else\n      warn('you need to set a color or background color on your element for this to work')\n\n// Mixin: Hover Underline\n// \n// This one is interesting, and may need tweaking to get it to work right on the\n// intended element. Works very nicely for text like in a span, and can animate.\n// \n// ex. hover-underline()\n// ex. hover-underline: 2px 'dotted'\n\nhover-underline(borderSize = 1px, type = 'solid', color = null)\n  border-bottom: borderSize unquote(type) transparent\n  \n  &:hover\n    border-bottom: borderSize unquote(type) color\n\n// Mixin: Hover Pop\n// \n// On hover, your element pops out from the page. For scale, it takes an integer\n// or float, 1 represents 100%, 2 is 200%, etc. Optionally can also rotate,\n// pass it a number followed by \"deg\", like 180deg. If you pass true for\n// shadow, it will animate in a drop shadow to add to the effect.\n// \n// ex. hover-pop: 1.5\n// ex. hover-pop: 2.6 90deg\n// ex. hover-pop: 1.2 45deg true\n\nhover-pop(scale = 1.2, rotate = null, shadow = null)\n  if shadow\n    box-shadow: 0 0 1px transparent\n    \n  &:hover\n    position: relative\n    z-index: 10\n    transform: scale(scale)\n    if shadow\n      box-shadow: 0 0 5px rgba(#000, .3)\n    if rotate\n      transform: scale(scale) rotate(rotate)\n\n// Mixin: Hover Fade\n// \n// On hover, fades the element's opacity down. Takes an amount as an integer\n// between 0 and 1, like opacity normally does. Recommended to be used with\n// transition.\n\n// ex. hover-fade: .5\n\nhover-fade(amount = .5)\n  &:hover\n    opacity: amount\n\n// Mixin: Hover Color\n// \n// Will swap an elements color or background color on hover. Takes a color in\n// any format as the first argument. Will first look for a background color to\n// change, then a color.\n// \n// ex. hover-color: #D45D86\n\nhover-color(color, forceUseColor = false)\n  &:hover\n    if @background and !forceUseColor\n      background-color: color\n    else if @background-color and !forceUseColor\n      background-color: color\n    else if @background-color\n      background-color: color\n    else if @color\n      color: color\n    else\n      warn('you need to set a color or background color on your element for this to work')\n\n// TODO:\n// *+click-down(pixels)*\n// *+click-shadow(radius)*\n// *+button-interaction(color)*\n","body.error\n  border 5px solid tomato\n  padding 5%\n  margin 0\n","// debug()\nnormalize-css()\nbase()\n\n// @import '_settings'\n@import 'jeet'\n\n// base\n@import \"_base/mixins\"\n@import \"_base/globals\"\n@import \"_base/colors\"\n@import \"_base/typography\"\n@import \"_base/animations\"\n\n// components\n@import \"_components/footer\"\n@import \"_components/header\"\n@import \"_components/buttons\"\n\n// pages\n@import \"_pages/*\"\n// Add individual pages here\n\n\n\n\n\n\nbody\n  padding 50px\n"]}